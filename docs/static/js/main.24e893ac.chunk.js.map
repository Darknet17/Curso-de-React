{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","Form","className","onSubmit","e","preventDefault","trim","length","cat","FormControl","type","placeholder","aria-label","value","onChange","target","Button","variant","GifGridItem","title","url","Card","style","width","Img","src","Body","Text","getGifs","category","a","encodeURI","fetch","response","json","data","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","Spinner","animation","Stack","direction","gap","GifExpertApp","categories","Navbar","bg","Container","Brand","Collapse","fluid","ReactDOM","render","document","getElementById"],"mappings":"2PAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OAEI,eAACC,EAAA,EAAD,CAAMC,UAAU,SAASC,SAXR,SAACC,GAClBA,EAAEC,iBACCN,EAAWO,OAAOC,OAAS,IAC1BV,GAAc,SAAAW,GAAG,OAAGT,GAAH,mBAAkBS,OACnCR,EAAc,MAOlB,UACI,cAACS,EAAA,EAAD,CACIC,KAAK,SACLC,YAAY,SACZT,UAAU,OACVU,aAAW,SACXC,MAAQd,EACRe,SAtBc,SAACV,GACvBJ,EAAcI,EAAEW,OAAOF,UAuBnB,cAACG,EAAA,EAAD,CAAQN,KAAK,SAASO,QAAQ,kBAA9B,wB,QC7BCC,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,eAACC,EAAA,EAAD,CAAMnB,UAAU,yCAAyCoB,MAAO,CAAEC,MAAO,UAAzE,UACI,cAACF,EAAA,EAAKG,IAAN,CAAUP,QAAQ,MAAMQ,IAAML,IAC9B,cAACC,EAAA,EAAKK,KAAN,UACI,eAACL,EAAA,EAAKM,KAAN,eACIR,W,yBCTPS,EAAO,uCAAG,WAAQC,GAAR,qBAAAC,EAAA,6DACbV,EADa,iDAE4BW,UAAUF,GAFtC,+DAGIG,MAAMZ,GAHV,cAGba,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAJW,kBAKZA,EAAKC,KAAI,YAA0B,IAAxBC,EAAuB,EAAvBA,GAAIlB,EAAmB,EAAnBA,MAAOmB,EAAY,EAAZA,OACzB,MAAO,CACHD,KAAIlB,QAAOC,IAAG,OAAEkB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBnB,SAP9B,2CAAH,sD,gBCKPoB,EAAU,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACb/B,mBAAS,CAChCqC,KAAM,GACNM,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAW,WACPhB,EAAQC,GAAUgB,MAAM,SAAAP,GACpBK,EAAS,CACLR,KAAMG,EACNG,SAAS,SAGlB,CAACZ,IAEGa,EDXyBI,CAAajB,GAAhCS,EAFwB,EAE9BH,KAAcM,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIvC,UAAU,oCAAd,SAAmD2B,IAEhDY,GAAW,cAACM,EAAA,EAAD,CAASC,UAAU,OAAO/B,QAAQ,SAEhD,cAACgC,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,SAEYb,EAAOF,KAAM,gBAAEC,EAAF,EAAEA,GAAIlB,EAAN,EAAMA,MAAOC,EAAb,EAAaA,IAAb,OACT,cAAC,EAAD,CAAsBD,MAAOA,EAAOC,IAAKA,GAAvBiB,YEe/Be,EA5BO,WAAO,IAAD,EAEYtD,mBAAS,CAAE,cAFvB,mBAEjBuD,EAFiB,KAELxD,EAFK,KAIxB,OACE,qCAEI,cAACyD,EAAA,EAAD,CAAQC,GAAG,OAAOtC,QAAQ,OAA1B,SACI,eAACuC,EAAA,EAAD,WACI,cAACF,EAAA,EAAOG,MAAR,6BAGA,cAACH,EAAA,EAAOI,SAAR,CAAiBxD,UAAU,sBAA3B,SACI,cAAC,EAAD,CAAaL,cAAeA,WAIxC,cAAC2D,EAAA,EAAD,CAAWG,OAAK,EAAhB,SAEQN,EAAWjB,KAAK,SAAAP,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAWA,GAArBA,YCnBpC+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.24e893ac.chunk.js","sourcesContent":["import {useState} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Form, FormControl} from \"react-bootstrap\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cat=>[inputValue, ...cat])\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <Form className=\"d-flex\" onSubmit={ handleSubmit }>\r\n            <FormControl\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                className=\"me-2\"\r\n                aria-label=\"Search\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n            <Button type=\"submit\" variant=\"outline-success\">Search</Button>\r\n        </Form>\r\n\r\n\r\n      // <form onSubmit={ handleSubmit }>\r\n      //     <input\r\n      //         type=\"text\"\r\n      //         value={ inputValue }\r\n      //         onChange={ handleInputChange }\r\n      //     />\r\n      // </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n","import PropTypes from \"prop-types\";\r\nimport {Card} from \"react-bootstrap\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <Card className=\"card animate__animated animate__fadeIn\" style={{ width: '100rem' }}>\r\n            <Card.Img variant=\"top\" src={ url }/>\r\n            <Card.Body>\r\n                <Card.Text> {\r\n                    title\r\n                }</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url:  PropTypes.string.isRequired\r\n}\r\n","export const getGifs = async ( category ) => {\r\n    const url =\r\n        `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=NCNkWMp16Y5WfMHRmSgYUH52BuaP7Zrh`\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n    return data.map(({id, title, images}) => {\r\n        return {\r\n            id, title, url: images?.downsized_medium.url\r\n        }\r\n    });\r\n}\r\n","import PropTypes from \"prop-types\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport {Spinner, Stack} from \"react-bootstrap\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {  loading && <Spinner animation=\"grow\" variant=\"dark\" />  }\r\n\r\n            <Stack direction=\"horizontal\" gap={3}>\r\n                    {\r\n                        images.map(  ({id, title, url }) => (\r\n                            <GifGridItem key={id} title={title} url={url}/>\r\n                        ))\r\n                    }\r\n            </Stack>\r\n        </>\r\n    );\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\n\r\n\r\n","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState]  = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( ()=>{\r\n        getGifs(category).then( images => {\r\n            setState({\r\n                data: images,\r\n                loading: false\r\n            });\r\n        } );\r\n    }, [category] );\r\n\r\n    return state;\r\n}\r\n","import {useState} from \"react\";\r\nimport {Button, Container, Form, FormControl, Navbar} from \"react-bootstrap\";\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp  = () => {\r\n\r\n    const [categories, setCategories] = useState([ 'One Punch']);\r\n\r\n    return (\r\n      <>\r\n\r\n          <Navbar bg=\"dark\" variant=\"dark\">\r\n              <Container>\r\n                  <Navbar.Brand>\r\n                      Gif Expert App\r\n                  </Navbar.Brand>\r\n                  <Navbar.Collapse className=\"justify-content-end\">\r\n                      <AddCategory setCategories={setCategories} />\r\n                  </Navbar.Collapse>\r\n              </Container>\r\n          </Navbar>\r\n          <Container fluid>\r\n              {\r\n                  categories.map( category => (\r\n                      <GifGrid key={category} category={ category } />\r\n                  ))\r\n              }\r\n          </Container>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}